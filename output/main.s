;
; File generated by cc65 v 2.18 - Git dbba5f3
;
	.fopt		compiler,"cc65 v 2.18 - Git dbba5f3"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_acia_puts
	.import		_acia_put_newline
	.import		_acia_getc
	.import		_lcd_init
	.import		_lcd_puts
	.import		_lcd_w_reg
	.import		_ym_init
	.import		_delay
	.import		_getByte
	.import		_ym_setreg
	.import		_ym_setreg_A1
	.import		_format_bank
	.import		_write_to_BANK
	.export		_c
	.export		_line
	.export		_note
	.export		_song_pos
	.export		_i
	.export		_i2
	.export		_waitL
	.export		_waitH
	.export		_playing
	.export		_cmd
	.export		_lcd_put_text
	.export		_print_f
	.export		_PlayFromBank
	.export		_main

.segment	"DATA"

_song_pos:
	.word	$003F

.segment	"RODATA"

S0001:
	.byte	$41,$70,$70,$61,$72,$74,$75,$73,$20,$56,$47,$4D,$20,$50,$6C,$61
	.byte	$79,$65,$72,$20,$56,$61,$73,$20,$76,$69,$74,$61,$00
S0003:
	.byte	$46,$6F,$72,$6D,$61,$74,$75,$6A,$69,$20,$42,$61,$6E,$6B,$79,$00
S0002:
	.byte	$5A,$61,$63,$69,$6E,$61,$6D,$20,$7A,$61,$70,$69,$73,$2E,$00
S0004:
	.byte	$53,$70,$6F,$75,$73,$74,$69,$6D,$20,$73,$6F,$6E,$67,$00

.segment	"BSS"

_c:
	.res	1,$00
_line:
	.res	2,$00
_note:
	.res	2,$00
_i:
	.res	2,$00
_i2:
	.res	2,$00
_waitL:
	.res	2,$00
_waitH:
	.res	2,$00
_playing:
	.res	2,$00
_cmd:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ lcd_put_text (char *s)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lcd_put_text: near

.segment	"CODE"

	jsr     pushax
	lda     #$80
	jsr     pusha
	lda     _line
	ldx     _line+1
	cpx     #$00
	bne     L0003
	cmp     #$00
	beq     L000C
	cmp     #$01
	beq     L000D
	cmp     #$02
	beq     L000E
	cmp     #$03
	beq     L000F
	bra     L0003
L000C:	lda     #$80
	bra     L0010
L000D:	lda     #$C0
	bra     L0010
L000E:	lda     #$90
	bra     L0010
L000F:	lda     #$D0
L0010:	sta     (sp)
L0003:	inc     _line
	bne     L0008
	inc     _line+1
L0008:	lda     _line
	cmp     #$04
	lda     _line+1
	sbc     #$00
	bvs     L000A
	eor     #$80
L000A:	bpl     L0009
	stz     _line
	stz     _line+1
L0009:	lda     (sp)
	jsr     _lcd_w_reg
	ldy     #$02
	jsr     ldaxysp
	jsr     _lcd_puts
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ print_f (char *s)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_f: near

.segment	"CODE"

	jsr     pushax
	jsr     _acia_put_newline
	jsr     ldax0sp
	jsr     _acia_puts
	jsr     ldax0sp
	jsr     _lcd_put_text
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ PlayFromBank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_PlayFromBank: near

.segment	"CODE"

	jmp     L0059
L0002:	jsr     _getByte
	sta     _cmd
	lda     _cmd
	cmp     #$50
	beq     L0007
	cmp     #$52
	beq     L0008
	cmp     #$53
	beq     L0009
	cmp     #$61
	beq     L000A
	cmp     #$62
	jeq     L0050
	cmp     #$63
	jeq     L0051
	cmp     #$66
	jeq     L0058
	cmp     #$70
	jeq     L0052
	cmp     #$71
	jeq     L0053
	cmp     #$72
	jeq     L0054
	cmp     #$73
	jeq     L0055
	cmp     #$74
	jeq     L0056
	cmp     #$75
	jeq     L0057
	jmp     L0059
L0007:	jsr     _getByte
	jmp     L0059
L0008:	jsr     _getByte
	jsr     pusha
	jsr     _getByte
	jsr     _ym_setreg
	jmp     L0059
L0009:	jsr     _getByte
	jsr     pusha
	jsr     _getByte
	jsr     _ym_setreg_A1
	jmp     L0059
L000A:	jsr     _getByte
	sta     _waitL
	stx     _waitL+1
	jsr     _getByte
	sta     _waitH
	stx     _waitH+1
	stz     _i
	stz     _i+1
L000B:	lda     _i
	ldx     _i+1
	jsr     pushax
	lda     _waitH
	ldx     _waitH+1
	jsr     tosicmp
	beq     L004E
	jpl     L0059
L004E:	stz     _i2
	stz     _i2+1
L0010:	lda     _i2
	ldx     _i2+1
	jsr     pushax
	lda     _waitL
	ldx     _waitL+1
	jsr     tosicmp
	beq     L004F
	bpl     L000D
L004F:	jsr     _delay
	inc     _i2
	bne     L0010
	inc     _i2+1
	bra     L0010
L000D:	inc     _i
	bne     L000B
	inc     _i+1
	bra     L000B
L0050:	stz     _i
	stz     _i+1
L0016:	lda     _i
	cmp     #$E0
	lda     _i+1
	sbc     #$02
	bvc     L001A
	eor     #$80
L001A:	jpl     L0059
	jsr     _delay
	inc     _i
	bne     L0016
	inc     _i+1
	bra     L0016
L0051:	stz     _i
	stz     _i+1
L001D:	lda     _i
	cmp     #$44
	lda     _i+1
	sbc     #$03
	bvc     L0021
	eor     #$80
L0021:	jpl     L0059
	jsr     _delay
	inc     _i
	bne     L001D
	inc     _i+1
	bra     L001D
L0052:	lda     #$01
	sta     _i
	stz     _i+1
L0024:	lda     _i
	cmp     #$02
	lda     _i+1
	sbc     #$00
	bvc     L0028
	eor     #$80
L0028:	jpl     L0059
	jsr     _delay
	inc     _i
	bne     L0024
	inc     _i+1
	bra     L0024
L0053:	lda     #$01
	sta     _i
	stz     _i+1
L002B:	lda     _i
	cmp     #$03
	lda     _i+1
	sbc     #$00
	bvc     L002F
	eor     #$80
L002F:	jpl     L0059
	jsr     _delay
	inc     _i
	bne     L002B
	inc     _i+1
	bra     L002B
L0054:	lda     #$01
	sta     _i
	stz     _i+1
L0032:	lda     _i
	cmp     #$04
	lda     _i+1
	sbc     #$00
	bvc     L0036
	eor     #$80
L0036:	jpl     L0059
	jsr     _delay
	inc     _i
	bne     L0032
	inc     _i+1
	bra     L0032
L0055:	lda     #$01
	sta     _i
	stz     _i+1
L0039:	lda     _i
	cmp     #$05
	lda     _i+1
	sbc     #$00
	bvc     L003D
	eor     #$80
L003D:	bpl     L0059
	jsr     _delay
	inc     _i
	bne     L0039
	inc     _i+1
	bra     L0039
L0056:	lda     #$01
	sta     _i
	stz     _i+1
L0040:	lda     _i
	cmp     #$06
	lda     _i+1
	sbc     #$00
	bvc     L0044
	eor     #$80
L0044:	bpl     L0059
	jsr     _delay
	inc     _i
	bne     L0040
	inc     _i+1
	bra     L0040
L0057:	lda     #$01
	sta     _i
	stz     _i+1
L0047:	lda     _i
	cmp     #$06
	lda     _i+1
	sbc     #$00
	bvc     L004B
	eor     #$80
L004B:	bpl     L0059
	jsr     _delay
	inc     _i
	bne     L0047
	inc     _i+1
	bra     L0047
L0058:	stz     _playing
	stz     _playing+1
L0059:	lda     #$01
	sta     _playing
	jmp     L0002

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     _print_f
	stz     _line
	stz     _line+1
	stz     _note
	stz     _note+1
	jsr     _lcd_init
	jsr     _ym_init
L0002:	jsr     _acia_getc
	sta     _c
	cmp     #$46
	beq     L0008
	cmp     #$50
	beq     L0009
	cmp     #$57
	bne     L0002
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     _print_f
	jsr     _write_to_BANK
	bra     L0002
L0008:	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     _print_f
	jsr     _format_bank
	bra     L0002
L0009:	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     _print_f
	lda     #$01
	sta     _playing
	stz     _playing+1
	jsr     _PlayFromBank
	bra     L0002

.endproc

