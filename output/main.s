;
; File generated by cc65 v 2.18 - Git b5f0c04
;
	.fopt		compiler,"cc65 v 2.18 - Git b5f0c04"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_acia_puts
	.import		_acia_put_newline
	.import		_acia_getc
	.import		_lcd_init
	.import		_lcd_puts
	.import		_lcd_w_reg
	.import		_ym_init
	.import		_delay
	.import		_getByte
	.import		_set_song_pos
	.import		_ym_setreg
	.import		_ym_setreg_A1
	.import		_format_bank
	.import		_write_to_BANK
	.export		_c
	.export		_line
	.export		_note
	.export		_i
	.export		_i2
	.export		_CharL
	.export		_CharH
	.export		_playing
	.export		_cmd
	.export		_lcd_put_text
	.export		_print_f
	.export		_PlayFromBank
	.export		_main

.segment	"RODATA"

S0002:
	.byte	$41,$70,$70,$61,$72,$74,$75,$73,$20,$56,$47,$4D,$20,$50,$6C,$61
	.byte	$79,$65,$72,$20,$56,$61,$73,$20,$76,$69,$74,$61,$00
S0004:
	.byte	$46,$6F,$72,$6D,$61,$74,$75,$6A,$69,$20,$42,$61,$6E,$6B,$79,$00
S0003:
	.byte	$5A,$61,$63,$69,$6E,$61,$6D,$20,$7A,$61,$70,$69,$73,$2E,$00
S0005:
	.byte	$53,$70,$6F,$75,$73,$74,$69,$6D,$20,$73,$6F,$6E,$67,$00
S0001:
	.byte	$4B,$6F,$6E,$65,$63,$00

.segment	"BSS"

_c:
	.res	1,$00
_line:
	.res	2,$00
_note:
	.res	2,$00
_i:
	.res	2,$00
_i2:
	.res	2,$00
_CharL:
	.res	2,$00
_CharH:
	.res	2,$00
_playing:
	.res	2,$00
_cmd:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ lcd_put_text (char *s)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_lcd_put_text: near

.segment	"CODE"

	jsr     pushax
	lda     #$80
	jsr     pusha
	lda     _line
	ldx     _line+1
	cpx     #$00
	bne     L0003
	cmp     #$00
	beq     L000C
	cmp     #$01
	beq     L000D
	cmp     #$02
	beq     L000E
	cmp     #$03
	beq     L000F
	bra     L0003
L000C:	lda     #$80
	bra     L0010
L000D:	lda     #$C0
	bra     L0010
L000E:	lda     #$90
	bra     L0010
L000F:	lda     #$D0
L0010:	sta     (sp)
L0003:	inc     _line
	bne     L0008
	inc     _line+1
L0008:	lda     _line
	cmp     #$04
	lda     _line+1
	sbc     #$00
	bvs     L000A
	eor     #$80
L000A:	bpl     L0009
	stz     _line
	stz     _line+1
L0009:	lda     (sp)
	jsr     _lcd_w_reg
	ldy     #$02
	jsr     ldaxysp
	jsr     _lcd_puts
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ print_f (char *s)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_f: near

.segment	"CODE"

	jsr     pushax
	jsr     _acia_put_newline
	jsr     ldax0sp
	jsr     _acia_puts
	jsr     ldax0sp
	jsr     _lcd_put_text
	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ PlayFromBank (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_PlayFromBank: near

.segment	"CODE"

	jmp     L0007
L0002:	jsr     _getByte
	sta     _cmd
	ldx     #$00
	lda     _cmd
	cmp     #$50
	jeq     L0008
	cmp     #$52
	jeq     L0009
	cmp     #$53
	jeq     L000A
	cmp     #$61
	jeq     L000B
	cmp     #$62
	jeq     L0097
	cmp     #$63
	jeq     L0098
	cmp     #$66
	jeq     L00A9
	cmp     #$70
	jeq     L0099
	cmp     #$71
	jeq     L009A
	cmp     #$72
	jeq     L009B
	cmp     #$73
	jeq     L009C
	cmp     #$74
	jeq     L009D
	cmp     #$75
	jeq     L009E
	cmp     #$76
	jeq     L009F
	cmp     #$77
	jeq     L00A0
	cmp     #$78
	jeq     L00A1
	cmp     #$79
	jeq     L00A2
	cmp     #$7A
	jeq     L00A3
	cmp     #$7B
	jeq     L00A4
	cmp     #$7C
	jeq     L00A5
	cmp     #$7D
	jeq     L00A6
	cmp     #$7E
	jeq     L00A7
	cmp     #$7F
	jeq     L00A8
	jmp     L0007
L0008:	jsr     _getByte
	sta     _CharL
	stx     _CharL+1
	jsr     _delay
	jmp     L0007
L0009:	jsr     _getByte
	sta     _CharL
	stx     _CharL+1
	jsr     _getByte
	sta     _CharH
	stx     _CharH+1
	lda     _CharL
	jsr     pusha
	lda     _CharH
	jsr     _ym_setreg
	jmp     L0007
L000A:	jsr     _getByte
	sta     _CharL
	stx     _CharL+1
	jsr     _getByte
	sta     _CharH
	stx     _CharH+1
	lda     _CharL
	jsr     pusha
	lda     _CharH
	jsr     _ym_setreg_A1
	jmp     L0007
L000B:	jsr     _getByte
	sta     _CharL
	stx     _CharL+1
	jsr     _getByte
	sta     _CharH
	stx     _CharH+1
	stz     _i
	stz     _i+1
L000C:	lda     _i
	ldx     _i+1
	jsr     pushax
	lda     _CharH
	ldx     _CharH+1
	jsr     tosicmp
	beq     L0095
	jpl     L0007
L0095:	stz     _i2
	stz     _i2+1
L0011:	lda     _i2
	ldx     _i2+1
	jsr     pushax
	lda     _CharL
	ldx     _CharL+1
	jsr     tosicmp
	beq     L0096
	bpl     L000E
L0096:	jsr     _delay
	inc     _i2
	bne     L0011
	inc     _i2+1
	bra     L0011
L000E:	inc     _i
	bne     L000C
	inc     _i+1
	bra     L000C
L0097:	stz     _i
	stz     _i+1
L0017:	lda     _i
	cmp     #$E0
	lda     _i+1
	sbc     #$02
	bvc     L001B
	eor     #$80
L001B:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L0017
	inc     _i+1
	bra     L0017
L0098:	stz     _i
	stz     _i+1
L001E:	lda     _i
	cmp     #$44
	lda     _i+1
	sbc     #$03
	bvc     L0022
	eor     #$80
L0022:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L001E
	inc     _i+1
	bra     L001E
L0099:	lda     #$01
	sta     _i
	stz     _i+1
L0025:	lda     _i
	cmp     #$02
	lda     _i+1
	sbc     #$00
	bvc     L0029
	eor     #$80
L0029:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L0025
	inc     _i+1
	bra     L0025
L009A:	lda     #$01
	sta     _i
	stz     _i+1
L002C:	lda     _i
	cmp     #$03
	lda     _i+1
	sbc     #$00
	bvc     L0030
	eor     #$80
L0030:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L002C
	inc     _i+1
	bra     L002C
L009B:	lda     #$01
	sta     _i
	stz     _i+1
L0033:	lda     _i
	cmp     #$04
	lda     _i+1
	sbc     #$00
	bvc     L0037
	eor     #$80
L0037:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L0033
	inc     _i+1
	bra     L0033
L009C:	lda     #$01
	sta     _i
	stz     _i+1
L003A:	lda     _i
	cmp     #$05
	lda     _i+1
	sbc     #$00
	bvc     L003E
	eor     #$80
L003E:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L003A
	inc     _i+1
	bra     L003A
L009D:	lda     #$01
	sta     _i
	stz     _i+1
L0041:	lda     _i
	cmp     #$06
	lda     _i+1
	sbc     #$00
	bvc     L0045
	eor     #$80
L0045:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L0041
	inc     _i+1
	bra     L0041
L009E:	lda     #$01
	sta     _i
	stz     _i+1
L0048:	lda     _i
	cmp     #$07
	lda     _i+1
	sbc     #$00
	bvc     L004C
	eor     #$80
L004C:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L0048
	inc     _i+1
	bra     L0048
L009F:	lda     #$01
	sta     _i
	stz     _i+1
L004F:	lda     _i
	cmp     #$08
	lda     _i+1
	sbc     #$00
	bvc     L0053
	eor     #$80
L0053:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L004F
	inc     _i+1
	bra     L004F
L00A0:	lda     #$01
	sta     _i
	stz     _i+1
L0056:	lda     _i
	cmp     #$09
	lda     _i+1
	sbc     #$00
	bvc     L005A
	eor     #$80
L005A:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L0056
	inc     _i+1
	bra     L0056
L00A1:	lda     #$01
	sta     _i
	stz     _i+1
L005D:	lda     _i
	cmp     #$0A
	lda     _i+1
	sbc     #$00
	bvc     L0061
	eor     #$80
L0061:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L005D
	inc     _i+1
	bra     L005D
L00A2:	lda     #$01
	sta     _i
	stz     _i+1
L0064:	lda     _i
	cmp     #$0B
	lda     _i+1
	sbc     #$00
	bvc     L0068
	eor     #$80
L0068:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L0064
	inc     _i+1
	bra     L0064
L00A3:	lda     #$01
	sta     _i
	stz     _i+1
L006B:	lda     _i
	cmp     #$0C
	lda     _i+1
	sbc     #$00
	bvc     L006F
	eor     #$80
L006F:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L006B
	inc     _i+1
	bra     L006B
L00A4:	lda     #$01
	sta     _i
	stz     _i+1
L0072:	lda     _i
	cmp     #$0D
	lda     _i+1
	sbc     #$00
	bvc     L0076
	eor     #$80
L0076:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L0072
	inc     _i+1
	bra     L0072
L00A5:	lda     #$01
	sta     _i
	stz     _i+1
L0079:	lda     _i
	cmp     #$0E
	lda     _i+1
	sbc     #$00
	bvc     L007D
	eor     #$80
L007D:	jpl     L0007
	jsr     _delay
	inc     _i
	bne     L0079
	inc     _i+1
	bra     L0079
L00A6:	lda     #$01
	sta     _i
	stz     _i+1
L0080:	lda     _i
	cmp     #$0F
	lda     _i+1
	sbc     #$00
	bvc     L0084
	eor     #$80
L0084:	bpl     L0007
	jsr     _delay
	inc     _i
	bne     L0080
	inc     _i+1
	bra     L0080
L00A7:	lda     #$01
	sta     _i
	stz     _i+1
L0087:	lda     _i
	cmp     #$10
	lda     _i+1
	sbc     #$00
	bvc     L008B
	eor     #$80
L008B:	bpl     L0007
	jsr     _delay
	inc     _i
	bne     L0087
	inc     _i+1
	bra     L0087
L00A8:	lda     #$01
	sta     _i
	stz     _i+1
L008E:	lda     _i
	cmp     #$11
	lda     _i+1
	sbc     #$00
	bvc     L0092
	eor     #$80
L0092:	bpl     L0007
	jsr     _delay
	inc     _i
	bne     L008E
	inc     _i+1
	bra     L008E
L00A9:	stz     _playing
	stz     _playing+1
	lda     #$3F
	jsr     _set_song_pos
	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     _acia_puts
L0007:	lda     _playing+1
	bne     L00AA
	lda     _playing
	cmp     #$01
	jeq     L0002
L00AA:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     _print_f
	stz     _line
	stz     _line+1
	stz     _note
	stz     _note+1
	jsr     _lcd_init
	jsr     _ym_init
L0002:	jsr     _acia_getc
	sta     _c
	cmp     #$46
	beq     L0008
	cmp     #$50
	beq     L0009
	cmp     #$57
	bne     L0002
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     _print_f
	jsr     _write_to_BANK
	bra     L0002
L0008:	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     _print_f
	jsr     _format_bank
	bra     L0002
L0009:	lda     #<(S0005)
	ldx     #>(S0005)
	jsr     _print_f
	ldx     #$00
	lda     #$3F
	jsr     _set_song_pos
	lda     #$01
	sta     _playing
	stz     _playing+1
	jsr     _PlayFromBank
	bra     L0002

.endproc

